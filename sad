@Composable
fun OffsetBeforeScrollList() {
    val initialOffset = 200f
    val offsetY = remember { mutableFloatStateOf(initialOffset) }
    val listState = rememberLazyListState()

    val nestedScrollConnection = remember {
        object : NestedScrollConnection {
            override fun onPreScroll(available: Offset, source: NestedScrollSource): Offset {
                val deltaY = available.y

                // Dragging up (negative y): move offset to 0 before scrolling
                if (deltaY < 0 && offsetY.floatValue > 0f) {
                    val newOffset = (offsetY.floatValue + deltaY).coerceAtLeast(0f)
                    val consumed = newOffset - offsetY.floatValue
                    offsetY.floatValue = newOffset
                    return Offset(0f, consumed)
                }

                // Dragging down (positive y): allow normal scroll
                return Offset.Zero
            }

            override fun onPostScroll(
                consumed: Offset,
                available: Offset,
                source: NestedScrollSource
            ): Offset {
                val deltaY = available.y

                // When at top and dragging down: increase offset again
                if (deltaY > 0 &&
                    listState.firstVisibleItemIndex == 0 &&
                    listState.firstVisibleItemScrollOffset == 0
                ) {
                    val newOffset = (offsetY.floatValue + deltaY).coerceAtMost(initialOffset)
                    val consumed = newOffset - offsetY.floatValue
                    offsetY.floatValue = newOffset
                    return Offset(0f, consumed)
                }

                return Offset.Zero
            }
        }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .nestedScroll(nestedScrollConnection)
    ) {
        LazyColumn(
            state = listState,
            modifier = Modifier
                .offset { IntOffset(x = 0, y = offsetY.floatValue.roundToInt()) }
                .fillMaxSize()
        ) {
            items(50) { index ->
                Text(
                    text = "Item #$index",
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp)
                )
            }
        }
    }
}
